!function(n,c){"use strict";function l(b,a,g){var d=g.baseHref(),k=b[0];return function(b,e,f){var g,h;f=f||{},h=f.expires,g=c.isDefined(f.path)?f.path:d,c.isUndefined(e)&&(h="Thu, 01 Jan 1970 00:00:00 GMT",e=""),c.isString(h)&&(h=new Date(h)),e=encodeURIComponent(b)+"="+encodeURIComponent(e),e=e+(g?";path="+g:"")+(f.domain?";domain="+f.domain:""),e+=h?";expires="+h.toUTCString():"",e+=f.secure?";secure":"",f=e.length+1,4096<f&&a.warn("Cookie '"+b+"' possibly not set or overflowed because it was too large ("+f+" > 4096 bytes)!"),k.cookie=e}}c.module("ngCookies",["ng"]).provider("$cookies",[function(){var b=this.defaults={};this.$get=["$$cookieReader","$$cookieWriter",function(a,g){return{get:function(d){return a()[d]},getObject:function(d){return(d=this.get(d))?c.fromJson(d):d},getAll:function(){return a()},put:function(d,a,m){g(d,a,m?c.extend({},b,m):b)},putObject:function(d,b,a){this.put(d,c.toJson(b),a)},remove:function(a,k){g(a,void 0,k?c.extend({},b,k):b)}}}]}]),c.module("ngCookies").factory("$cookieStore",["$cookies",function(b){return{get:function(a){return b.getObject(a)},put:function(a,c){b.putObject(a,c)},remove:function(a){b.remove(a)}}}]),l.$inject=["$document","$log","$browser"],c.module("ngCookies").provider("$$cookieWriter",function(){this.$get=l})}(window,window.angular);var app=angular.module("TestFrontend",["ngMaterial","ngCookies"]);app.controller("MainCtrl",function($scope,$mdSidenav,$cookies,Account,Project,Task){function getAccountData(){Account.fetchAccount($cookies.get("userSessionKey"),function(data){$scope.account=data})}function getProjects(){Project.fetchProjects($cookies.get("userSessionKey"),function(data){$scope.projects=data})}function getTasks(){0!=$scope.project.id?($scope.content="views/tasks.tpl.html",Task.fetchTasks($cookies.get("userSessionKey"),$scope.project.id,$scope.sizeTask,0,$scope.search,function(data){$scope.tasks=data.tasks,$scope.sizeTask>=data.total_count?$scope.isAllTasks=!0:$scope.isAllTasks=!1,$scope.countTask=data.total_count})):$scope.content="views/select_project.tpl.html"}function buildToggler(componentId){return function(){$mdSidenav(componentId).toggle()}}$scope.loading=!0,$scope.stepTask=3,$scope.countTask=0,$scope.project={id:0},"string"!=typeof $cookies.get("userSessionKey")?($scope.loading=!0,Account.createNewUser(function(data){$cookies.put("userSessionKey",data.session),getAccountData(),getProjects(),$scope.loading=!1})):($scope.loading=!0,Account.checkSession($cookies.get("userSessionKey"),function(){$scope.loading=!1,getAccountData(),getProjects(),$scope.loading=!1})),$scope.$watch("project.id",function(){$scope.sizeTask=13,$scope.search=null,getTasks()}),$scope.$watch("search",function(){getTasks()}),$scope.$watch("tasks",function(){0==$scope.project.id||0!=$scope.countTask||$scope.search?0==$scope.countTask&&$scope.search&&($scope.content="views/tasks_not.tpl.html"):$scope.content="views/tasks_done.tpl.html"}),$scope.addProjectBar=function(){delete $scope.newProject,$scope.toggleRight(),$scope.rightBar="views/project_add.tpl.html"},$scope.showTaskBar=function(taskId){Task.fetchTask($cookies.get("userSessionKey"),taskId,function(data){$scope.task=data,$scope.toggleRight(),$scope.rightBar="views/task.tpl.html"})},$scope.editProjectBar=function(){$scope.toggleRight(),$scope.project.newTitle=$scope.project.title,$scope.rightBar="views/project_edit.tpl.html"},$scope.addTaskBar=function(){delete $scope.newTask,$scope.toggleRight(),$scope.rightBar="views/task_add.tpl.html"},$scope.editTaskBar=function(){$scope.rightBar="views/task_edit.tpl.html"},$scope.addProject=function(){Project.createProject($cookies.get("userSessionKey"),$scope.newProject.title,function(){getProjects(),$scope.toggleRight()})},$scope.deleteProject=function(){Project.deleteProject($cookies.get("userSessionKey"),$scope.project.id,function(){getProjects(),delete $scope.project,$scope.content="views/select_project.tpl.html"})},$scope.editProject=function(){Project.updateProject($cookies.get("userSessionKey"),$scope.project.id,$scope.project.newTitle,function(){getProjects(),$scope.toggleRight(),$scope.project.title=$scope.project.newTitle})},$scope.addTask=function(){Task.createTask($cookies.get("userSessionKey"),$scope.project.id,$scope.newTask.title,$scope.newTask.description,function(){getProjects(),getTasks(),$scope.toggleRight()})},$scope.editTask=function(){Task.updateTask($cookies.get("userSessionKey"),$scope.task.id,$scope.task.title,$scope.task.description,function(){getTasks(),$scope.rightBar="views/task.tpl.html"})},$scope.deleteTask=function(){Task.deleteTask($cookies.get("userSessionKey"),$scope.task.id,function(){getProjects(),getTasks(),$scope.toggleRight()})},$scope.compliteTask=function(id){Task.compliteTask($cookies.get("userSessionKey"),id,function(){getProjects(),getTasks()})},$scope.loadMoreTasks=function(){$scope.isAllTasks||($scope.sizeTask=$scope.sizeTask+$scope.stepTask,$scope.sizeTask>$scope.countTask&&($scope.sizeTask=$scope.countTask),getTasks())},$scope.openMenu=function($mdOpenMenu,ev){originatorEv=ev,$mdOpenMenu(ev)},$scope.toggleRight=buildToggler("right")}),app.service("Account",function($http,$log){this.createNewUser=function(callback){$http({method:"POST",url:"https://api-test-task.decodeapps.io/signup"}).then(function(response){callback(response.data)},function(){$log.error("API createNewUser error")})},this.checkSession=function(session,callback){$http({method:"GET",url:"https://api-test-task.decodeapps.io/session",params:{session:session}}).then(function(response){callback(response)},function(){$log.error("API checkSession error")})},this.fetchAccount=function(session,callback){$http({method:"GET",url:"https://api-test-task.decodeapps.io/account",params:{session:session}}).then(function(response){callback(response.data.Account)},function(){$log.error("API fetchAccount error")})}}),app.service("Project",function($http,$log){this.fetchProjects=function(session,callback){$http({method:"GET",url:"https://api-test-task.decodeapps.io/projects",params:{session:session}}).then(function(response){callback(response.data.projects)},function(){$log.error("API fetchProjects error")})},this.fetchProject=function(session,project_id,callback){$http({method:"GET",url:"https://api-test-task.decodeapps.io/projects/project",params:{session:session,project_id:project_id}}).then(function(response){callback(response)},function(){$log.error("API fetchProject error")})},this.createProject=function(session,title,callback){$http({method:"POST",url:"https://api-test-task.decodeapps.io/projects/project",data:{session:session,Project:{title:title}}}).then(function(response){callback(response.data.Account)},function(){$log.error("API createProject error")})},this.updateProject=function(session,id,title,callback){$http({method:"POST",url:"https://api-test-task.decodeapps.io/projects/project",data:{session:session,Project:{id:id,title:title}}}).then(function(response){callback(response.data.Account)},function(){$log.error("API updateProject error")})},this.deleteProject=function(session,id,callback){$http({method:"DELETE",url:"https://api-test-task.decodeapps.io/projects/project",params:{session:session,project_id:id}}).then(function(response){callback(response.data.Account)},function(){$log.error("API deleteProject error")})}}),app.service("Task",function($http,$log,$filter){this.fetchTasks=function(session,project_id,paging_size,paging_offset,condition_keywords,callback){$http({method:"GET",url:"https://api-test-task.decodeapps.io/tasks",params:{session:session,project_id:project_id,paging_size:paging_size,paging_offset:paging_offset,condition_keywords:condition_keywords}}).then(function(response){var date,rObj={},tomorrow=new Date;tomorrow.setDate(tomorrow.getDate()-1),response.data.tasks.forEach(function(item){var taskDate=new Date(item.Task.created_at);item.Task.date=$filter("date")(taskDate,"EEEE")+" ("+$filter("date")(taskDate,"dd.MM.yyyy")+")",$filter("date")(new Date,"dd.MM.yyyy")==$filter("date")(taskDate,"dd.MM.yyyy")?item.Task.date="Today":$filter("date")(tomorrow,"dd.MM.yyyy")==$filter("date")(taskDate,"dd.MM.yyyy")&&(item.Task.date="Yesterday"),null!=item.Task.title&&(item.Task.date==date?rObj[date].push(item.Task):(date=item.Task.date,rObj[date]=[item.Task]))}),callback({tasks:rObj,total_count:response.data.total_count})},function(){$log.error("API fetchTasks error")})},this.fetchTask=function(session,task_id,callback){$http({method:"GET",url:"https://api-test-task.decodeapps.io/tasks/task",params:{session:session,task_id:task_id}}).then(function(response){callback(response.data.Task)},function(){$log.error("API fetchProject error")})},this.createTask=function(session,project_id,title,description,callback){$http({method:"POST",url:"https://api-test-task.decodeapps.io/tasks/task",data:{session:session,Project:{id:project_id},Task:{title:title,description:description}}}).then(function(response){callback(response.data.Task)},function(){$log.error("API createTask error")})},this.updateTask=function(session,id,title,description,callback){$http({method:"POST",url:"https://api-test-task.decodeapps.io/tasks/task",data:{session:session,Task:{id:id,title:title,description:description}}}).then(function(response){callback(response.data)},function(){$log.error("API updateTask error")})},this.deleteTask=function(session,id,callback){$http({method:"DELETE",url:"https://api-test-task.decodeapps.io/tasks/task",params:{session:session,task_id:id}}).then(function(response){callback(response.data)},function(){$log.error("API deleteTask error")})},this.compliteTask=function(session,id,callback){$http({method:"POST",url:"https://api-test-task.decodeapps.io/tasks/task",data:{session:session,Task:{id:id}}}).then(function(response){callback(response.data)},function(){$log.error("API deleteTask error")})}}),app.directive("projectsList",function(){return{restrict:"AE",templateUrl:"views/projects.tpl.html"}}),app.directive("whenScrolled",function(){return function(scope,elm,attr){var raw=elm[0];elm.bind("scroll",function(){raw.scrollTop+raw.offsetHeight>=raw.scrollHeight&&scope.$apply(attr.whenScrolled)})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
